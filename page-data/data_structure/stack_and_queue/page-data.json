{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/data_structure/stack_and_queue/",
    "result": {"data":{"site":{"siteMetadata":{"title":"일기장"}},"markdownRemark":{"id":"102c4889-b8ed-5414-8f5c-f0d4da54955b","excerpt":"스택 (stack) 스택이란 쌓아올린다는 것을 의미하며, 원반 던지기 하듯 차곡차곡 쌓아올린 형태의 자료 구조를 의미한다. 같은 구조와 크기의 자료를 정해진 방향으로만 쌓을 수 있고 top…","html":"<h2>스택 (stack)</h2>\n<p>스택이란 쌓아올린다는 것을 의미하며, 원반 던지기 하듯 차곡차곡 쌓아올린 형태의 자료 구조를 의미한다.<br>\n같은 구조와 크기의 자료를 정해진 방향으로만 쌓을 수 있고 top으로 정한 곳을 통해서만 접근할 수 있다. (쉽게 말해 입구가 하나밖에 없다 생각하면 쉽다.)<br>\ntop에는 가장 최근에 들어온 자료를 가리키고 있고 새 자료를 넣을 때 top이 가리키는 자료의 위에 쌓이게 된다. 삭제할 때 마찬가지로 top을 통해 가장 최근에 넣은 자료 먼저 삭제된다.<br>\ntop을 통해 삽입하는 연산을 <code class=\"language-text\">push</code>, 마찬가지로 top을 통해 삭제하는 연산을 <code class=\"language-text\">pop</code>이라 한다. 이러한 스택의 구조를 <code class=\"language-text\">후입 선출</code> 구조라 하며 줄여서 <code class=\"language-text\">LIFO(last in first out)</code>이라 부른다.<br>\n만일 스택 저장공간에 데이터가 없는데 프로그램이 스택에서 데이터를 꺼내려고 할 경우 <code class=\"language-text\">stack underflow</code> 현상이 일어나게 되며, 반대로 스택 저장공간이 가득찼을 때 하나의 데이터를 더 넣고자 할 경우 <code class=\"language-text\">stack overflow</code> 현상이 일어나게 된다. 이 두 현상은 프로그램에 오류를 야기하게 된다.</p>\n<h3>스택 활용 예</h3>\n<ul>\n<li>웹 브라우저 뒤로가기</li>\n<li>역순 문자열 만들기</li>\n<li>후위 표기법 계산</li>\n<li>실행 취소(undo)…등등</li>\n</ul>\n<h3>스택 예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\r\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAX_SIZE</span> <span class=\"token expression\"><span class=\"token number\">5</span></span></span>\r\n\r\n\r\n<span class=\"token keyword\">int</span> stack<span class=\"token punctuation\">[</span>MAX_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">int</span> top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n\r\n\r\n<span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>top <span class=\"token operator\">>=</span> MAX_SIZE<span class=\"token punctuation\">)</span>\r\n\t<span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----overflow----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t<span class=\"token keyword\">else</span>\r\n\t<span class=\"token punctuation\">{</span>\r\n\t\tstack<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\r\n\t\ttop <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">void</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\n\t<span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----underflow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t<span class=\"token keyword\">else</span>\r\n\t<span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pop_%d\\n\"</span><span class=\"token punctuation\">,</span> stack<span class=\"token punctuation\">[</span>top <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\tstack<span class=\"token punctuation\">[</span>top <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n\t\ttop<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"스택----------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> MAX_SIZE<span class=\"token punctuation\">;</span> n<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span> stack<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\r\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t<span class=\"token keyword\">int</span> act <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\r\n\t\r\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"명령어를 입력하세요\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.push\\t 2.pop\\t 3.exit \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>act<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\r\n\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>act<span class=\"token punctuation\">)</span>\r\n\t<span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\r\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert push val : \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t\t<span class=\"token function\">push</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\r\n\t\t\r\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\r\n\t\t\t<span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\r\n\t\t\t\r\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\r\n\t\t\tact <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\r\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\r\n\t\t\t\r\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\r\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t<span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>큐 (queue)</h2>\n<p>큐는 예를 들어 은행의 번호표를 생각하면 쉽다. 창구에선 가장 먼저 번호표를 뽑은 사람의 업무를 처리해주는 것 처럼 선입선출 방식 즉 줄여서 <code class=\"language-text\">FIFO(first in first out)</code>방식의 자료구조이다.<br>\n쉽게 생각해서 큐의 입구는 두개가 있다고 가정하면 된다. 한 쪽 끝에선 삽입 작업을 하고 다른 한 쪽 끝에선 삭제 작업이 이루어 지고 있다.<br>\n삭제 연산만 수행되는 곳을 <code class=\"language-text\">front</code>, 삽입 연산만 수행되는 곳을 <code class=\"language-text\">rear</code>로 정해 각각의 연산작업만 수행된다.<br>\n<code class=\"language-text\">rear</code>에서 이루어지는 삽입연산을 <code class=\"language-text\">enQueue</code>, <code class=\"language-text\">front</code>에서 이루어지는 삭제연산을 <code class=\"language-text\">deQueue</code>라 부른다.<br>\n접근 방법은 위에 설명했다 시피 가장 첫 원소와 끝 원소로만 가능하다. 즉 <code class=\"language-text\">front</code>에서는 가장 먼저 큐에 들어온 <code class=\"language-text\">첫 번째 원소</code>가 되며, <code class=\"language-text\">rear</code>에서는 가장 늦게 큐에 들어온 <code class=\"language-text\">마지막 원소</code>가 되는 것 이다.</p>\n<h3>큐 활용 예</h3>\n<ul>\n<li>은행 업무</li>\n<li>프로세스 관리</li>\n<li>너비 우선 탐색(BFS / breadth first search) 구현</li>\n<li>캐시(cache) 구현</li>\n<li>우선순위가 같은 작업의 예약 구현</li>\n</ul>\n<h3>큐 예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\r\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAX_SIZE</span> <span class=\"token expression\"><span class=\"token number\">5</span></span></span>\r\n\r\n\r\n<span class=\"token keyword\">int</span> queue<span class=\"token punctuation\">[</span>MAX_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">int</span> front <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">int</span> rear <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n\r\n\r\n\r\n<span class=\"token keyword\">int</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>front <span class=\"token operator\">==</span> rear<span class=\"token punctuation\">)</span>\r\n\t<span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\t\r\n\t <span class=\"token punctuation\">}</span> \r\n\t<span class=\"token keyword\">else</span>\r\n\t<span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rear <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MAX_SIZE <span class=\"token operator\">==</span> front<span class=\"token punctuation\">)</span>\r\n\t<span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----isFull----\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t<span class=\"token keyword\">else</span>\r\n\t<span class=\"token punctuation\">{</span>\r\n\t\tqueue<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>rear<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">int</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n\t<span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----isEmpty---\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t<span class=\"token keyword\">else</span>\r\n\t<span class=\"token punctuation\">{</span>\r\n\t\tfront <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>front <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MAX_SIZE<span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token keyword\">return</span> queue<span class=\"token punctuation\">[</span>front<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n\r\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t<span class=\"token keyword\">int</span> act <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\r\n\t\r\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"명령어를 입력하세요\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.push\\t 2.pop\\t 3.exit \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>act<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\r\n\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>act<span class=\"token punctuation\">)</span>\r\n\t<span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\r\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert push val : \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t\t<span class=\"token function\">push</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\r\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pop()----->\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\r\n\t\t\t\r\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\r\n\t\t\tact <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\r\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\r\n\t\t\t\r\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\r\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"스택(stack) & 큐(queue)","date":"February 12, 2022","description":""}},"previous":{"fields":{"slug":"/data_structure/data_structure_and_array/"},"frontmatter":{"title":"자료구조 개념과 배열"}},"next":{"fields":{"slug":"/etc/hugo_tutorial/"},"frontmatter":{"title":"github 블로그 만들기 (with hugo)"}}},"pageContext":{"id":"102c4889-b8ed-5414-8f5c-f0d4da54955b","previousPostId":"40d079dd-76e5-51ee-aa73-a49ccfa26d47","nextPostId":"6fcda7be-0c4e-5d02-90b1-89f8329ffc79"}},
    "staticQueryHashes": ["3257411868","642825376"]}